What happens when you initialize a repository? Why do you need to do it?

	Create a new repository using Git Bash. First navigate to the 
	directory where the subject files are located. Next run "git init". 
	This initializes a blank or empty repository but creating 
	the appropriate files in a hidden directory under the subject 
	directory.

	Need to do this in order to track your files with version control.

How is the staging area different from the working directory and the 
   repository? What value do you think it offers?

	The staging area related to the git repository, which makes it 
	different from the working directory, which is independent of git.

	The staging area is only a preliminary part of git, however. It holds 
	the file before any commits have been made. This allows us to combine
	several related files together within git.

	This change is for testing a commit.

How can you use the staging area to make sure you have one commit per logical
   change?

	The staging area allows us to control which files are included in 
	each commit. For example, if several files have been changed, they 
	be committed separately by using the staging area.

What are some situations when branches would be helpful in keeping your 
   history organized? How would branches help?

	Branches are useful for 1) making different versions of an application,
	for example a basic and advanced versions, or 2) experimenting with
	different approaches to the coding. In the case of experimentation,
	the branch will allow extensive changes without messing up the original
	code.

How do the diagrams help you visualize the branch structure?

	A diagram is a visual representation of the branches in a repository.
	This makes the structure easier to understand.

What is the result of merging two branches together? Why do we represent it 
   in the diagram the way we do?

	Merging combines the code in two branches. In the diagram we identify
	the commit where the merge occurred as the new "tip" or "head" of 
	the master branch. This indicates that the code in both branches
	are combined and retains all commits in both branches that have
	been combined.
	

What are the pros and cons of Git’s automatic merging vs. always doing 
  merges manually?

	Issues may arise in merges when conflicting code has been entered
	in files by different programmers. These conflicts must be resolved 
	in order to merge branches successfully. Automatic merges run the risk
	of generating conflicting code.

	One advantage of automatic merging with git is that the program will 
	identify all potential conflicts. Manual methods may result in 
	overlooking some conflicts. However, it seems confusing to resolve
	conflicts with the git generated files.

	It would seem best to avoid conflicting code as much as possible
	by organizing programming efforts.
